"""autogenerated by genpy from coalas_pkg/CollAvoidServiceRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class CollAvoidServiceRequest(genpy.Message):
  _md5sum = "87cf6d3d77ac07cce2aeae7d3497d452"
  _type = "coalas_pkg/CollAvoidServiceRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint8 joy_speed_output
uint8 joy_turn_output
uint8[11] sensdor_data

"""
  __slots__ = ['joy_speed_output','joy_turn_output','sensdor_data']
  _slot_types = ['uint8','uint8','uint8[11]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       joy_speed_output,joy_turn_output,sensdor_data

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CollAvoidServiceRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.joy_speed_output is None:
        self.joy_speed_output = 0
      if self.joy_turn_output is None:
        self.joy_turn_output = 0
      if self.sensdor_data is None:
        self.sensdor_data = chr(0)*11
    else:
      self.joy_speed_output = 0
      self.joy_turn_output = 0
      self.sensdor_data = chr(0)*11

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_2B.pack(_x.joy_speed_output, _x.joy_turn_output))
      _x = self.sensdor_data
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_struct_11B.pack(*_x))
      else:
        buff.write(_struct_11s.pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 2
      (_x.joy_speed_output, _x.joy_turn_output,) = _struct_2B.unpack(str[start:end])
      start = end
      end += 11
      self.sensdor_data = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_2B.pack(_x.joy_speed_output, _x.joy_turn_output))
      _x = self.sensdor_data
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_struct_11B.pack(*_x))
      else:
        buff.write(_struct_11s.pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 2
      (_x.joy_speed_output, _x.joy_turn_output,) = _struct_2B.unpack(str[start:end])
      start = end
      end += 11
      self.sensdor_data = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_11s = struct.Struct("<11s")
_struct_2B = struct.Struct("<2B")
_struct_11B = struct.Struct("<11B")
"""autogenerated by genpy from coalas_pkg/CollAvoidServiceResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class CollAvoidServiceResponse(genpy.Message):
  _md5sum = "ba34392ef9fd10684273e2c6a84847c4"
  _type = "coalas_pkg/CollAvoidServiceResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint8 corrected_joy_speed
uint8 corrected_joy_turn



"""
  __slots__ = ['corrected_joy_speed','corrected_joy_turn']
  _slot_types = ['uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       corrected_joy_speed,corrected_joy_turn

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CollAvoidServiceResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.corrected_joy_speed is None:
        self.corrected_joy_speed = 0
      if self.corrected_joy_turn is None:
        self.corrected_joy_turn = 0
    else:
      self.corrected_joy_speed = 0
      self.corrected_joy_turn = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_2B.pack(_x.corrected_joy_speed, _x.corrected_joy_turn))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 2
      (_x.corrected_joy_speed, _x.corrected_joy_turn,) = _struct_2B.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_2B.pack(_x.corrected_joy_speed, _x.corrected_joy_turn))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 2
      (_x.corrected_joy_speed, _x.corrected_joy_turn,) = _struct_2B.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2B = struct.Struct("<2B")
class CollAvoidService(object):
  _type          = 'coalas_pkg/CollAvoidService'
  _md5sum = '7c2dd6e553bf4bcac771ba0b4ab02457'
  _request_class  = CollAvoidServiceRequest
  _response_class = CollAvoidServiceResponse
